"use strict";(self.webpackChunksnack_uikit=self.webpackChunksnack_uikit||[]).push([[6853],{"./storybook/stories/Icons.story.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>__WEBPACK_DEFAULT_EXPORT__,workingWithIcons:()=>workingWithIcons});var _packages_icons_README_md__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./packages/icons/README.md"),_components__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./storybook/stories/components/index.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js");function cov_283w2u2ihi(){var path="/builds/sbercloud-ui/tokens-design-system/snack-uikit/storybook/stories/Icons.story.tsx",global=new Function("return this")(),gcv="__coverage__",coverage=global[gcv]||(global[gcv]={});coverage[path]&&"f43569206a78328036557958fda74a521e9aae54"===coverage[path].hash||(coverage[path]={path:"/builds/sbercloud-ui/tokens-design-system/snack-uikit/storybook/stories/Icons.story.tsx",statementMap:{0:{start:{line:6,column:19},end:{line:8,column:1}},1:{start:{line:11,column:26},end:{line:11,column:61}},2:{start:{line:11,column:32},end:{line:11,column:61}},3:{start:{line:13,column:42},end:{line:15,column:1}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:11,column:26},end:{line:11,column:27}},loc:{start:{line:11,column:32},end:{line:11,column:61}},line:11}},branchMap:{},s:{0:0,1:0,2:0,3:0},f:{0:0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"f43569206a78328036557958fda74a521e9aae54"});var actualCoverage=coverage[path];return cov_283w2u2ihi=function(){return actualCoverage},actualCoverage}cov_283w2u2ihi();const __WEBPACK_DEFAULT_EXPORT__=(cov_283w2u2ihi().s[0]++,{title:"Documentation/Working With Icons"});cov_283w2u2ihi().s[1]++;const workingWithIcons=(cov_283w2u2ihi().s[3]++,{render:()=>(cov_283w2u2ihi().f[0]++,cov_283w2u2ihi().s[2]++,(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components__WEBPACK_IMPORTED_MODULE_0__.UG,{md:_packages_icons_README_md__WEBPACK_IMPORTED_MODULE_2__}))})},"./packages/icons/README.md":module=>{module.exports="# Icons\n\n## Installation\n`npm i @snack-uikit/icons`\n\n## Как подключить иконки в проект\n\n1. Подключите `svg-inline-loader` в конфигурацию webpack-a:\n\n```typescript\nexport default {\n  module: {\n    rules: [\n      { \n        test: /\\.symbol.svg$/, \n        use: 'svg-inline-loader' \n      },\n    ],\n  }, \n  ...\n};\n```\n\n2. Подключите спрайт с иконками в проект\n\n```typescript jsx\nimport { Sprite, SpriteSVG } from '@snack-uikit/icons';\n\nfunction App () {\n  return (\n    <>\n       <Sprite content={SpriteSVG} />\n    </>\n  );\n}\n```\n\n3. Используйте иконки как обычные реакт-компоненты:\n\n```typescript jsx\nimport { ChevronLeftSVG }  from '@snack-uikit/icons';\n\nfunction MyComponent ()  {\n  return <div><ChevronLeftSVG /></div>\n}\n```\n\n## Как добавить новую иконку\n\n1. Добавьте новый svg-файл в соответсвующую коллекцию иконок в папке svgs (это может быть новый размер иконки). Далее все нужные файлы сгенерятся автоматически во время релиза пакета. \n2. Если такой коллекции еще нет, создайте новую (**new-collection** - имя новой коллекции):\n   * создайте папку **new-collection** внутри svgs\n   * добавьте svg-файлы с названиями **new-collections-s/xs** (где s/xs размер иконки, 16 или 24)\n   * добавьте скрипт в package.json:\n   ```json\n   \"build:new-collection\": \"npm run fix:icons --directory=new-collection && npm run build:icons --directory=new-collection\",\n   ```\n   * обновите скрипт **compile** в package.json:   \n   ```json\n   \"compile\": \"... && npm run build:new-collection\"\n   ```\n3. Чтобы новая иконка появилась локально, запустите скрипт `build:packages` в корневом `package.json`\n\n## Examples\n\n```typescript jsx\nimport { ChevronLeftSVG }  from '@snack-uikit/icons';\n\n<ChevronLeftSVG size={24}/>\n```\n\n## Props\n\n```typescript jsx\ninterface ISvgIconProps extends SVGProps<SVGSVGElement> {\n  className?: string;\n  size?: string | number;\n  style?: React.CSSProperties;\n}\n```\n\n\n\n[Changelog](./CHANGELOG.md)\n\n\n"}}]);